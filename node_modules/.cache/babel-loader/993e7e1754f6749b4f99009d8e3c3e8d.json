{"ast":null,"code":"import { getCurrentInstance } from \"./getCurrentInstance.mjs\";\nexport function injectSelf(key) {\n  const {\n    provides\n  } = getCurrentInstance('injectSelf');\n  if (provides && key in provides) {\n    // TS doesn't allow symbol as index type\n    return provides[key];\n  }\n}","map":{"version":3,"mappings":"SAASA,kB;AAIT,OAAO,SAASC,UAAT,CAAqBC,GAArB,EAAsD;EAC3D,MAAM;IAAEC;EAAF,IAAeH,kBAAkB,CAAC,YAAD,CAAvC;EAEA,IAAIG,QAAQ,IAAKD,GAAD,IAA4BC,QAA5C,EAAsD;IACpD;IACA,OAAOA,QAAQ,CAACD,GAAD,CAAf;EACD;AACF","names":["getCurrentInstance","injectSelf","key","provides"],"sources":["../../src/util/injectSelf.ts"],"sourcesContent":["import { getCurrentInstance } from '@/util/getCurrentInstance'\nimport type { InjectionKey } from 'vue'\n\nexport function injectSelf<T>(key: InjectionKey<T> | string): T | undefined\nexport function injectSelf (key: InjectionKey<any> | string) {\n  const { provides } = getCurrentInstance('injectSelf')\n\n  if (provides && (key as string | symbol) in provides) {\n    // TS doesn't allow symbol as index type\n    return provides[key as string]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}