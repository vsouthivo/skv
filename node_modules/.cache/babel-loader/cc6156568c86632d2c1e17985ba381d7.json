{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createVNode as _createVNode } from \"vue\";\n// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\";\nimport { VExpansionPanelText } from \"./VExpansionPanelText.mjs\"; // Composables\n\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeLazyProps } from \"../../composables/lazy.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, provide } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps()\n  },\n  emits: {\n    'group:selected': val => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'bgColor');\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const isDisabled = computed(() => (groupItem == null ? void 0 : groupItem.disabled.value) || props.disabled);\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index);\n      return arr;\n    }, []));\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === 1);\n    });\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === -1);\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(() => {\n      var _slots$default;\n      const hasText = !!(slots.text || props.text);\n      const hasTitle = !!(slots.title || props.title);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value],\n        \"style\": backgroundColorStyles.value,\n        \"aria-expanded\": groupItem.isSelected.value\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": ['v-expansion-panel__shadow', ...elevationClasses.value]\n        }, null), hasTitle && _createVNode(VExpansionPanelTitle, {\n          \"key\": \"title\",\n          \"collapseIcon\": props.collapseIcon,\n          \"color\": props.color,\n          \"expandIcon\": props.expandIcon,\n          \"hideActions\": props.hideActions,\n          \"ripple\": props.ripple\n        }, {\n          default: () => [slots.title ? slots.title() : props.title]\n        }), hasText && _createVNode(VExpansionPanelText, {\n          \"key\": \"text\",\n          \"eager\": props.eager\n        }, {\n          default: () => [slots.text ? slots.text() : props.text]\n        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["makeVExpansionPanelTitleProps","VExpansionPanelTitle","VExpansionPanelSymbol","VExpansionPanelText","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeLazyProps","makeRoundedProps","useRounded","makeTagProps","useBackgroundColor","computed","provide","defineComponent","useRender","VExpansionPanel","name","props","title","String","text","bgColor","emits","val","setup","slots","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","selectedIndices","group","items","reduce","arr","item","index","selected","includes","id","push","isBeforeSelected","findIndex","isSelected","some","selectedIndex","isAfterSelected","hasText","hasTitle","default","collapseIcon","color","expandIcon","hideActions","ripple","eager","_slots$default"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpansionPanelText } from './VExpansionPanelText'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeLazyProps } from '@/composables/lazy'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              key=\"title\"\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          ) }\n\n          { hasText && (\n            <VExpansionPanelText key=\"text\" eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          ) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"]},"metadata":{},"sourceType":"module"}