{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable sonarjs/no-identical-functions */\nexport const independentSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref => {\n      let {\n        id,\n        value,\n        selected\n      } = _ref;\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref2) => {\n          let [key, value] = _ref2;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 1 && on[0] === id) return selected;\n      }\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n      return map;\n    },\n    out: v => {\n      const arr = [];\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key);\n      }\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport const independentSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref3 => {\n      let {\n        selected,\n        id,\n        ...rest\n      } = _ref3;\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();\n      return parentStrategy.select({\n        ...rest,\n        id,\n        selected: singleSelected\n      });\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n      if (v != null && v.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents);\n      }\n      return map;\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport const leafSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref4 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref4;\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const leafSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref5 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref5;\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const classicSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref6 => {\n      let {\n        id,\n        value,\n        selected,\n        children,\n        parents\n      } = _ref6;\n      const original = new Map(selected);\n      const items = [id];\n      while (items.length) {\n        const item = items.shift();\n        selected.set(item, value ? 'on' : 'off');\n        if (children.has(item)) {\n          items.push(...children.get(item));\n        }\n      }\n      let parent = parents.get(id);\n      while (parent) {\n        const childrenIds = children.get(parent);\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on');\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off');\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n        parent = parents.get(parent);\n      } // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref7) => {\n          let [key, value] = _ref7;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 0) return original;\n      }\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n      return map;\n    },\n    out: (v, children) => {\n      const arr = [];\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key);\n      }\n      return arr;\n    }\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"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","names":["independentSelectStrategy","mandatory","strategy","select","_ref","id","value","selected","on","Array","from","entries","reduce","arr","key","length","set","in","v","children","parents","map","Map","out","push","independentSingleSelectStrategy","parentStrategy","_ref3","rest","singleSelected","has","get","slice","leafSelectStrategy","_ref4","leafSingleSelectStrategy","_ref5","classicSelectStrategy","_ref6","original","items","item","shift","parent","childrenIds","everySelected","every","cid","noneSelected"],"sources":["../../../src/composables/nested/selectStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\nexport type SelectStrategyFn = (data: {\n  id: string\n  value: boolean\n  selected: Map<string, 'on' | 'off' | 'indeterminate'>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformInFn = (\n  v: string[] | undefined,\n  children: Map<string, string[]>,\n  parents: Map<string, string>,\n) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformOutFn = (\n  v: Map<string, 'on' | 'off' | 'indeterminate'>,\n  children: Map<string, string[]>,\n  parents: Map<string, string>,\n) => any[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFn\n  in: SelectStrategyTransformInFn\n  out: SelectStrategyTransformOutFn\n}\n\nexport const independentSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected }) => {\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as string[])\n        if (on.length === 1 && on[0] === id) return selected\n      }\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: v => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ selected, id, ...rest }) => {\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)!]]) : new Map()\n      return parentStrategy.select({ ...rest, id, selected: singleSelected })\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      if (v?.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents)\n      }\n\n      return map\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children, parents }) => {\n      const original = new Map(selected)\n\n      const items = [id]\n\n      while (items.length) {\n        const item = items.shift()!\n\n        selected.set(item, value ? 'on' : 'off')\n\n        if (children.has(item)) {\n          items.push(...children.get(item)!)\n        }\n      }\n\n      let parent = parents.get(id)\n\n      while (parent) {\n        const childrenIds = children.get(parent)!\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on')\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off')\n\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n        parent = parents.get(parent)\n      }\n\n      // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as string[])\n        if (on.length === 0) return original\n      }\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: (v, children) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}