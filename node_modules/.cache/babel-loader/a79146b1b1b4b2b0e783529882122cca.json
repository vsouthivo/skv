{"ast":null,"code":"// Utils\nimport { SUPPORTS_INTERSECTION } from \"../../util/index.mjs\"; // Types\n\nfunction mounted(el, binding) {\n  if (!SUPPORTS_INTERSECTION) return;\n  const modifiers = binding.modifiers || {};\n  const value = binding.value;\n  const {\n    handler,\n    options\n  } = typeof value === 'object' ? value : {\n    handler: value,\n    options: {}\n  };\n  const observer = new IntersectionObserver(function () {\n    var _el$_observe;\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let observer = arguments.length > 1 ? arguments[1] : undefined;\n    const _observe = (_el$_observe = el._observe) == null ? void 0 : _el$_observe[binding.instance.$.uid];\n    if (!_observe) return; // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting); // If is not quiet or has already been\n    // initted, invoke the user callback\n\n    if (handler && (!modifiers.quiet || _observe.init) && (!modifiers.once || isIntersecting || _observe.init)) {\n      handler(isIntersecting, entries, observer);\n    }\n    if (isIntersecting && modifiers.once) unmounted(el, binding);else _observe.init = true;\n  }, options);\n  el._observe = Object(el._observe);\n  el._observe[binding.instance.$.uid] = {\n    init: false,\n    observer\n  };\n  observer.observe(el);\n}\nfunction unmounted(el, binding) {\n  var _el$_observe2;\n  const observe = (_el$_observe2 = el._observe) == null ? void 0 : _el$_observe2[binding.instance.$.uid];\n  if (!observe) return;\n  observe.observer.unobserve(el);\n  delete el._observe[binding.instance.$.uid];\n}\nexport const Intersect = {\n  mounted,\n  unmounted\n};\nexport default Intersect;","map":{"version":3,"mappings":"AAAA;SACSA,qB,gCAET;;AAoBA,SAASC,OAAT,CAAkBC,EAAlB,EAAmCC,OAAnC,EAAqE;EACnE,IAAI,CAACH,qBAAL,EAA4B;EAE5B,MAAMI,SAAS,GAAGD,OAAO,CAACC,SAAR,IAAqB,EAAvC;EACA,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAtB;EACA,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAuB,OAAOF,KAAP,KAAiB,QAAjB,GACzBA,KADyB,GAEzB;IAAEC,OAAO,EAAED,KAAX;IAAkBE,OAAO,EAAE;EAA3B,CAFJ;EAIA,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,YAGrC;IAAA;IAAA,IAFHC,OAEG,uEAFoC,EAEpC;IAAA,IADHF,QACG;IACH,MAAMG,QAAQ,mBAAGT,EAAE,CAACS,QAAN,qBAAGC,aAAcT,OAAO,CAACU,QAAR,CAAkBC,CAAlB,CAAoBC,GAAlC,CAAjB;IACA,IAAI,CAACJ,QAAL,EAAe,OAFZ,CAEmB;;IAEtB,MAAMK,cAAc,GAAGN,OAAO,CAACO,IAAR,CAAaC,KAAK,IAAIA,KAAK,CAACF,cAA5B,CAAvB,CAJG,CAMH;IACA;;IACA,IACEV,OAAO,KACL,CAACF,SAAS,CAACe,KAAX,IACAR,QAAQ,CAACS,IAFJ,CAAP,KAIE,CAAChB,SAAS,CAACiB,IAAX,IACAL,cADA,IAEAL,QAAQ,CAACS,IANX,CADF,EASE;MACAd,OAAO,CAACU,cAAD,EAAiBN,OAAjB,EAA0BF,QAA1B,CAAP;IACD;IAED,IAAIQ,cAAc,IAAIZ,SAAS,CAACiB,IAAhC,EAAsCC,SAAS,CAACpB,EAAD,EAAKC,OAAL,CAAT,CAAtC,KACKQ,QAAQ,CAACS,IAAT,GAAgB,IAAhB;EACN,CA1BgB,EA0Bdb,OA1Bc,CAAjB;EA4BAL,EAAE,CAACS,QAAH,GAAcY,MAAM,CAACrB,EAAE,CAACS,QAAJ,CAApB;EACAT,EAAE,CAACS,QAAH,CAAaR,OAAO,CAACU,QAAR,CAAkBC,CAAlB,CAAoBC,GAAjC,IAAwC;IAAEK,IAAI,EAAE,KAAR;IAAeZ;EAAf,CAAxC;EAEAA,QAAQ,CAACgB,OAAT,CAAiBtB,EAAjB;AACD;AAED,SAASoB,SAAT,CAAoBpB,EAApB,EAAqCC,OAArC,EAAuE;EAAA;EACrE,MAAMqB,OAAO,oBAAGtB,EAAE,CAACS,QAAN,qBAAGc,cAActB,OAAO,CAACU,QAAR,CAAkBC,CAAlB,CAAoBC,GAAlC,CAAhB;EACA,IAAI,CAACS,OAAL,EAAc;EAEdA,OAAO,CAAChB,QAAR,CAAiBkB,SAAjB,CAA2BxB,EAA3B;EACA,OAAOA,EAAE,CAACS,QAAH,CAAaR,OAAO,CAACU,QAAR,CAAkBC,CAAlB,CAAoBC,GAAjC,CAAP;AACD;AAED,OAAO,MAAMY,SAAuC,GAAG;EACrD1B,OADqD;EAErDqB;AAFqD,CAAhD;AAKP,eAAeK,SAAf","names":["SUPPORTS_INTERSECTION","mounted","el","binding","modifiers","value","handler","options","observer","IntersectionObserver","entries","_observe","_el$_observe","instance","$","uid","isIntersecting","some","entry","quiet","init","once","unmounted","Object","observe","_el$_observe2","unobserve","Intersect"],"sources":["../../../src/directives/intersect/index.ts"],"sourcesContent":["// Utils\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n  ObjectDirective,\n} from 'vue'\n\ntype ObserveHandler = (\n  isIntersecting: boolean,\n  entries: IntersectionObserverEntry[],\n  observer: IntersectionObserver,\n) => void\n\nexport interface ObserveDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value?: ObserveHandler | { handler: ObserveHandler, options?: IntersectionObserverInit }\n  modifiers: {\n    once?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  if (!SUPPORTS_INTERSECTION) return\n\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : { handler: value, options: {} }\n\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    const _observe = el._observe?.[binding.instance!.$.uid]\n    if (!_observe) return // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting)\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      handler && (\n        !modifiers.quiet ||\n        _observe.init\n      ) && (\n        !modifiers.once ||\n        isIntersecting ||\n        _observe.init\n      )\n    ) {\n      handler(isIntersecting, entries, observer)\n    }\n\n    if (isIntersecting && modifiers.once) unmounted(el, binding)\n    else _observe.init = true\n  }, options)\n\n  el._observe = Object(el._observe)\n  el._observe![binding.instance!.$.uid] = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unmounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  const observe = el._observe?.[binding.instance!.$.uid]\n  if (!observe) return\n\n  observe.observer.unobserve(el)\n  delete el._observe![binding.instance!.$.uid]\n}\n\nexport const Intersect: ObjectDirective<HTMLElement> = {\n  mounted,\n  unmounted,\n}\n\nexport default Intersect\n"]},"metadata":{},"sourceType":"module"}