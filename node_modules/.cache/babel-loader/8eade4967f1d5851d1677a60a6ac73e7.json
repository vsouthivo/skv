{"ast":null,"code":"// Composables\nimport { createDefaults, DefaultsSymbol } from \"./composables/defaults.mjs\";\nimport { createDisplay, DisplaySymbol } from \"./composables/display.mjs\";\nimport { createIcons, IconSymbol } from \"./composables/icons.mjs\";\nimport { createLocale, LocaleAdapterSymbol } from \"./composables/locale.mjs\";\nimport { createTheme, ThemeSymbol } from \"./composables/theme.mjs\";\nimport { RtlSymbol } from \"./composables/rtl.mjs\"; // Utilities\n\nimport { defineComponent, getUid, mergeDeep } from \"./util/index.mjs\";\nimport { reactive } from 'vue'; // Types\n\nexport * from \"./composables/index.mjs\";\nexport function createVuetify() {\n  let vuetify = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    blueprint,\n    ...rest\n  } = vuetify;\n  const options = mergeDeep(blueprint, rest);\n  const {\n    aliases = {},\n    components = {},\n    directives = {}\n  } = options;\n  const defaults = createDefaults(options.defaults);\n  const display = createDisplay(options.display, options.ssr);\n  const theme = createTheme(options.theme);\n  const icons = createIcons(options.icons);\n  const locale = createLocale(options.locale);\n  const install = app => {\n    for (const key in directives) {\n      app.directive(key, directives[key]);\n    }\n    for (const key in components) {\n      app.component(key, components[key]);\n    }\n    for (const key in aliases) {\n      app.component(key, defineComponent({\n        ...aliases[key],\n        name: key,\n        aliasName: aliases[key].name\n      }));\n    }\n    theme.install(app);\n    locale.install(app);\n    app.provide(DefaultsSymbol, defaults);\n    app.provide(DisplaySymbol, display);\n    app.provide(ThemeSymbol, theme);\n    app.provide(IconSymbol, icons);\n    app.provide(LocaleAdapterSymbol, locale.adapter);\n    getUid.reset();\n    app.mixin({\n      computed: {\n        $vuetify() {\n          return reactive({\n            defaults: inject.call(this, DefaultsSymbol),\n            display: inject.call(this, DisplaySymbol),\n            theme: inject.call(this, ThemeSymbol),\n            icons: inject.call(this, IconSymbol),\n            locale: inject.call(this, LocaleAdapterSymbol),\n            rtl: inject.call(this, RtlSymbol)\n          });\n        }\n      }\n    });\n  };\n  return {\n    install,\n    defaults,\n    display,\n    theme,\n    icons,\n    locale: locale.adapter\n  };\n}\nexport const version = \"3.0.0-beta.13\";\ncreateVuetify.version = version; // Vue's inject() can only be used in setup\n\nfunction inject(key) {\n  var _vm$parent, _vm$vnode$appContext;\n  const vm = this.$;\n  const provides = ((_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) ?? ((_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides);\n  if (provides && key in provides) {\n    return provides[key];\n  }\n}","map":{"version":3,"mappings":"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","names":["createDefaults","DefaultsSymbol","createDisplay","DisplaySymbol","createIcons","IconSymbol","createLocale","LocaleAdapterSymbol","createTheme","ThemeSymbol","RtlSymbol","defineComponent","getUid","mergeDeep","reactive","createVuetify","vuetify","blueprint","rest","options","aliases","components","directives","defaults","display","ssr","theme","icons","locale","install","app","key","directive","component","name","aliasName","provide","adapter","reset","mixin","computed","$vuetify","inject","call","rtl","version","vm","$","provides","parent","vnode","appContext","_vm$vnode$appContext"],"sources":["../src/framework.ts"],"sourcesContent":["// Composables\nimport { createDefaults, DefaultsSymbol } from '@/composables/defaults'\nimport { createDisplay, DisplaySymbol } from '@/composables/display'\nimport { createIcons, IconSymbol } from '@/composables/icons'\nimport { createLocale, LocaleAdapterSymbol } from '@/composables/locale'\nimport { createTheme, ThemeSymbol } from '@/composables/theme'\nimport { RtlSymbol } from '@/composables/rtl'\n\n// Utilities\nimport { defineComponent, getUid, mergeDeep } from '@/util'\nimport { reactive } from 'vue'\n\n// Types\nimport type { App, ComponentPublicInstance, InjectionKey } from 'vue'\nimport type { DefaultsOptions } from '@/composables/defaults'\nimport type { DisplayOptions } from '@/composables/display'\nimport type { IconOptions } from '@/composables/icons'\nimport type { LocaleAdapter, LocaleOptions } from '@/composables/locale'\nimport type { RtlOptions } from '@/composables/rtl'\nimport type { ThemeOptions } from '@/composables/theme'\n\nexport * from './composables'\n\nexport interface VuetifyOptions {\n  aliases?: Record<string, any>\n  blueprint?: Blueprint\n  components?: Record<string, any>\n  directives?: Record<string, any>\n  defaults?: DefaultsOptions\n  display?: DisplayOptions\n  theme?: ThemeOptions\n  icons?: IconOptions\n  locale?: (LocaleOptions & RtlOptions) | (LocaleAdapter & RtlOptions)\n  ssr?: boolean\n}\n\nexport interface Blueprint extends Omit<VuetifyOptions, 'blueprint'> {}\n\nexport function createVuetify (vuetify: VuetifyOptions = {}) {\n  const { blueprint, ...rest } = vuetify\n  const options = mergeDeep(blueprint, rest)\n  const {\n    aliases = {},\n    components = {},\n    directives = {},\n  } = options\n\n  const defaults = createDefaults(options.defaults)\n  const display = createDisplay(options.display, options.ssr)\n  const theme = createTheme(options.theme)\n  const icons = createIcons(options.icons)\n  const locale = createLocale(options.locale)\n\n  const install = (app: App) => {\n    for (const key in directives) {\n      app.directive(key, directives[key])\n    }\n\n    for (const key in components) {\n      app.component(key, components[key])\n    }\n\n    for (const key in aliases) {\n      app.component(key, defineComponent({\n        ...aliases[key],\n        name: key,\n        aliasName: aliases[key].name,\n      }))\n    }\n\n    theme.install(app)\n    locale.install(app)\n\n    app.provide(DefaultsSymbol, defaults)\n    app.provide(DisplaySymbol, display)\n    app.provide(ThemeSymbol, theme)\n    app.provide(IconSymbol, icons)\n    app.provide(LocaleAdapterSymbol, locale.adapter)\n\n    getUid.reset()\n\n    app.mixin({\n      computed: {\n        $vuetify () {\n          return reactive({\n            defaults: inject.call(this, DefaultsSymbol),\n            display: inject.call(this, DisplaySymbol),\n            theme: inject.call(this, ThemeSymbol),\n            icons: inject.call(this, IconSymbol),\n            locale: inject.call(this, LocaleAdapterSymbol),\n            rtl: inject.call(this, RtlSymbol),\n          })\n        },\n      },\n    })\n  }\n\n  return {\n    install,\n    defaults,\n    display,\n    theme,\n    icons,\n    locale: locale.adapter,\n  }\n}\n\nexport const version = __VUETIFY_VERSION__\ncreateVuetify.version = version\n\n// Vue's inject() can only be used in setup\nfunction inject (this: ComponentPublicInstance, key: InjectionKey<any> | string) {\n  const vm = this.$\n\n  const provides = vm.parent?.provides ?? vm.vnode.appContext?.provides\n\n  if (provides && (key as any) in provides) {\n    return provides[(key as string)]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}