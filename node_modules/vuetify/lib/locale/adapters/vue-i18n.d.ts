import { I18n, useI18n } from 'vue-i18n';
import { App, Ref } from 'vue';

interface RtlOptions {
    rtl?: Record<string, boolean>;
}

interface LocaleMessages {
    [key: string]: LocaleMessages | string;
}
interface LocaleProps {
    locale?: string;
    fallbackLocale?: string;
    messages?: LocaleMessages;
}
interface LocaleInstance {
    current: Ref<string>;
    fallback: Ref<string>;
    messages: Ref<LocaleMessages>;
    t: (key: string, ...params: unknown[]) => string;
    n: (value: number) => string;
}
interface LocaleAdapter {
    createRoot: (app?: App) => LocaleInstance;
    getScope: () => LocaleInstance;
    createScope: (options?: LocaleProps) => LocaleInstance;
}

declare type VueI18nAdapterParams = {
    i18n: I18n<{}, {}, {}, string, false>;
    useI18n: typeof useI18n;
} & RtlOptions;
declare function createVueI18nAdapter({ i18n, useI18n, ...rest }: VueI18nAdapterParams): (LocaleAdapter & RtlOptions);

export { createVueI18nAdapter };
